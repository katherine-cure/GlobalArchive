###### Importing length and 3D points from EventMeasure (Stereo) ######


### Written by Tim Langlois 
### Any errors are due to Tim Langlois
### Please forward any updates and improvements to timothy.langlois@uwa.edu.au

# The following code forms an appendix to the manuscript:
#  "Langlois et al. 2015. Length selectivity of commercial fish traps assessed from in situ comparisons with stereo-videos: is there evidence of sampling bias? Fisheries Research"
# Please cite it if you like it

### Designed to take direct output from an EventMeasure project. 

### objective is to 
#1 Import data and add Taxa column
# 2 BRing in factors
# 3 Make species richness and total
# 4 Limit lenght data by range and precision rules
# 5 Make biomass estimates from Length
# 6 Remove species that can never be ID'd
# 7 Added a check to see what MaxN and missing in the L.MaxN


####


# Functions needed ----
`%ni%` <- Negate(`%in%`)


# Where the data sits----
setwd("C:/Tims Documents/ownCloud/MEG_Appo_BRUV_2014/Data")

#Read in EM data and check format -----
# here we are importing .txt. output from EM - Length and 3Dpoints. We have to skip the first rows of file as this has EM headers

# DONT have MAXN data at this stage
M=read.delim('All MaxN by Stage.TXT', header=T,skip=4,stringsAsFactors = FALSE,strip.white = TRUE)
head(M)

L=read.delim('All 3D points and length measurements.TXT', header=T,skip=4,stringsAsFactors = FALSE,strip.white = TRUE)
head(L)
# To check format
str(L)
head(L)
# FYI Just check if we have schools assocaited with single measures - yes we do!
unique(L$Number)


# Read in Factors and Habitat -----
# in this case also combined with environemntal data
hab=read.csv('2015-06-19_Appo_Hab_Status.csv',header=T)
head(hab)
names(hab)


# FORMATING EM data----
##Make a Genus_Species column
(subset(L,Genus==""))

#fill in blank Genus names with family
M$Genus <- ifelse(M$Genus == "", M$Family, M$Genus)
L$Genus <- ifelse(L$Genus == "", L$Family, L$Genus)

# Combine Genus and species
M$Taxa <- do.call(paste, c(M[c("Genus", "Species")], sep = " "))
L$Taxa <- do.call(paste, c(L[c("Genus", "Species")], sep = " "))

names(L)



# unique(M$Taxa)
unique(L$Taxa)
head(L)

# SUbset out the dodgy taxa----
# Confirm this list with DI!
# out<-read.csv("Species taken out 2.csv") #Di need to check this - from other project
# tail(out)
# out1<-(out$Taxa)
# M1<-subset(M,Taxa%ni%out1)
# L1<-subset(L,Taxa%ni%out1)

# Need to make NA Lenght and Prescision  from 3d points to be zero - so they are still included in LMaxN----
# test<-is.na(L1$Length..mm.)
# L1.Lna <- L1[is.na(L1$Length..mm.),]
# L1.Rna <- L1[is.na(L1$Range..mm.),]
# L1.Pna <- L1[is.na(L1$Precision..mm.),]
# head(L1.Lna)
# L1$Length..mm.[is.na(L1$Length..mm.)] <- 0 #Dont need this if we don't use error cal below'

#With Lenght data To standardise for RANGE and Error#####
# To standardise for RANGE and Error we can remove any length observations outside Range and Error rules
# This is important if we whish to use Length data as the observation value for abundance and lenght inforamtion
# i.e. the abundnace data will be restricted by range
summary(L$Range..mm.)

L1<-L

is.na(L1$Length..mm.)

OutOfRange<-subset(L1,Range..mm.>10000)
L2 <- L1[ which(!(L1$Range..mm. > 10000)), ]

L2.Lna <- L2[is.na(L2$Length..mm.),] 
# Make %Error Coloum - I have stopped error estimate as very few and removes 3D points
# L2$Length..mm.<-as.numeric(L2$Length..mm.)
# L2$Error <-L2$Precision..mm./L2$Length..mm.*100
# 
# OutOfError<-subset(L2,Error>10) # you can choose what error you allow
# L3 <- L2[ which(!(L2$Error > 10)), ]
L3<-L2

L3.Lna <- L3[is.na(L3$Length..mm.),] #21589


# Make abundance data from M and L----
library(plyr)
# We always want OpCode and Taxa - we can include habitat and factors later on
# head(M1)
M1<-M

MaxN <- ddply(M1, .(OpCode,Taxa), summarise, 
               Abundance      = sum(MaxN))
head(MaxN)

MaxN.Fam <- ddply(M1, .(OpCode,Family), summarise, 
                   Abundance      = sum(MaxN))



LMaxN <- ddply(L3, .(OpCode,Taxa), summarise, 
                 Abundance      = sum(Number))
head(LMaxN)
sum(LMaxN$Abundance)

LMaxN.Fam <- ddply(L3, .(OpCode,Family), summarise, 
                   Abundance      = sum(Number))


#Add in Totals and species richness -----
# first put in cross tabulated format, .W is for wide format - also good for PRIMER 
library(reshape)
detach("package:reshape", unload=TRUE) #this fixes names of value problem
library(reshape2)
MaxN.W <- dcast(MaxN,OpCode~Taxa,value.var="Abundance",fun.aggregate=sum)
MaxN.Fam.W <- dcast(MaxN.Fam,OpCode~Family,value.var="Abundance",fun.aggregate=sum)

LMaxN.W <- dcast(LMaxN,OpCode~Taxa,value.var="Abundance",fun.aggregate=sum)
LMaxN.Fam.W <- dcast(LMaxN.Fam,OpCode~Family,value.var="Abundance",fun.aggregate=sum)
names(LMaxN.Fam.W)


# - need to do work out colum numbers by looking at names output!!!!!
# For MaxN
unique(MaxN$Taxa)

names(MaxN.W)
MaxN.W$Total <- rowSums(MaxN.W[,2:263] ) #try ncol

Presence.Absence <- MaxN.W[,2:263]
for (i in 1:dim(Presence.Absence)[2]){
  Presence.Absence[,i] <- ifelse(Presence.Absence[,i]>0,1,0)
}
MaxN.W$Rich <- rowSums(Presence.Absence)
head(MaxN.W)


# FOr MaxNfrom L
names(LMaxN.W)
LMaxN.W$Total <- rowSums(LMaxN.W[,2:264] )

Presence.Absence <- LMaxN.W[,2:264]
for (i in 1:dim(Presence.Absence)[2]){
  Presence.Absence[,i] <- ifelse(Presence.Absence[,i]>0,1,0)
}
LMaxN.W$Rich <- rowSums(Presence.Absence)

head(LMaxN.W)



# MAKE BIOMASS data from Length data----
setwd("C:/Tims Documents/ownCloud/MEG_Fish_LifeHistory")


library(XLConnect)
LWbook<- loadWorkbook("LenghtWeight_2015_03_13.xlsx", create = FALSE)
summary(LWbook)
LW <- readWorksheet(LWbook, sheet = "LW_mm")

head(LW)
names(LW)

# Check if we have species length-weight relationship----
#1. Make unique list of Taxa from final data

library(plyr)
L3.U <- ddply(L3, .(Taxa), summarise, 
                        Sum      = sum(Number))
head(L3.U)
# 2. Then match the Genus_Species
LW.Not.Match<-which(!(L3.U$Taxa %in% LW$Genus_Species))
LW.Not.Match.Table<-L3.U[LW.Not.Match,]
dim(LW.Not.Match.Table)

#We have a few missing Taxa -   you can add these into the LW table - or we can also try to use Family averages for the missing?
L3.FU <- ddply(L3, .(Family), summarise, 
              Sum      = sum(Number))
head(L3.FU)
LW.Not.Match.F<-which(!(L3.FU$Family %in% LW$Family))
LW.Not.Match.F.Table<-L3.FU[LW.Not.Match.F,]
dim(LW.Not.Match.F.Table)
head(LW.Not.Match.F.Table)
# We currently have some funny ones in there - so we could use a family average for the ones missing

# Make a family average LW table----
LW.Family <- ddply(LW, .(Family), summarise, 
              a      = mean(a),
              b      = mean(b),
              aLL      = mean(aLL),
              bLL      = mean(bLL)
              )

head(LW.Family)

# Fill L3 data with relevant a and b and if blank use family?----
names(LW)
LW2<-subset(LW,select=c("Genus_Species","a","b","aLL","bLL"))
LW3<-rename(LW2,c("Genus_Species"="Taxa"))
# L4<-merge(L3,LW3,by="Taxa",all.x=F) #Merge is not working here due to dupliacte ID's?
L4 <- join(L3, LW3, by="Taxa", match="first")
# Subset ones with no taxa LW
L5 <- subset(L4, is.na(L4$a))
L5<-L5[ , !names(L5) %in% c("a","b","aLL","bLL")]
# Fill with famlily LW
L6 <- join(L5, LW.Family, by="Family", match="first")
head(L6)

L7 <- L4[!(is.na(L4$a) | L4$a==""), ]
# Recombine data with LW for both taxa and family
L8<-rbind(L7,L6) #L8 has a and b for Taxa and Family where available!
head(L8)
L8 <- L8[!(is.na(L8$a)),] #this currenlty gets rid of species with no LW - bad ID's prob



# Change Lenght to cm
L8$Length..cm.<-L8$Length..mm./10 #Not sure about this!
# Adjusted length that accounts for a b not for Fork length
L8$AdjLength<-(L8$Length..cm.*L8$bLL)+L8$aLL
#Calc Biomass and mulitply by number of fish - this has to be CM!
L8$Biomass<-(L8$AdjLength^L8$b)*L8$a*L8$Number
head(L8)

# Check the biomass estimates across species - in kg's
library(plyr)
L.Biomass <- ddply(L8, .(Taxa), summarise, 
                   Mean      = mean(Biomass))

L.Biomass <- L.Biomass[order(-L.Biomass$Mean),]
head(L.Biomass,50) #I think this looks Ok as KG?


# Reformat Biomass data----
detach("package:reshape", unload=TRUE) #this fixes names of value problem
library(reshape2)
# By Taxa
LBio.W <- dcast(L8,OpCode~Taxa,value.var="Biomass",fun.aggregate=sum)
tail(LBio.W)
#Add in Totals 
names(LBio.W)
LBio.W$Total <- rowSums(LBio.W[,2:261] )

# By Family
LBio.Fam.W <- dcast(L8,OpCode~Family,value.var="Biomass",fun.aggregate=sum)
tail(LBio.Fam.W)
#Add in Totals 
names(LBio.Fam.W)
LBio.Fam.W$Total <- rowSums(LBio.Fam.W[,2:39] )



# Expand the Length data by Number coloum TJL added 150505----
head(L3)
L3[is.na(L3$Length..mm.),] #use L with no 3D points
names(L3)
L9 <- L3[rep(seq.int(1,nrow(L3)), L3$Number), 1:38]
head(L9)
names(L3)

##MERGE Factors and habitat with Abundance, Length and biomass data----
# Datasets
head(MaxN.W)# maxN in wide
head(MaxN.Fam.W) #MaxN of Fmaily in wide
head(LMaxN.W)# maxN in wide
head(LMaxN.Fam.W) #MaxN of Fmaily in wide
head(L8)# This has Length and Biomass data in Long
head(LBio.W)#Biomass in wide
head(LBio.Fam.W)#Biomass of family in wide

# Merge
MaxN.hab.W <- join(MaxN.W,hab, by="OpCode", match="first",type="inner")
MaxN.Fam.hab.W <- join(MaxN.Fam.W,hab, by="OpCode", match="first",type="inner")
LMaxN.hab.W <- join(LMaxN.W,hab, by="OpCode", match="first",type="inner")
LMaxN.Fam.hab.W <- join(LMaxN.Fam.W,hab, by="OpCode", match="first",type="inner")

L.hab.L <- join(L9,hab, by="OpCode",type="inner") #we loose a few OpCodes here?
head(L.hab.L)
LBio.hab.W <- join(LBio.W,hab, by="OpCode", match="first",type="inner")
head(LBio.hab.W)
LBio.Fam.hab.W <- join(LBio.Fam.W,hab, by="OpCode", match="first",type="inner")

# Write wide and length data sets with hab----
setwd("C:/Tims Documents/ownCloud/MEG_Appo_BRUV_2014/Data")

write.csv(MaxN.hab.W, file=paste(Sys.Date(),"Appo_MaxN.hab.W.csv",sep = "_"), row.names=FALSE)
write.csv(MaxN.Fam.hab.W, file=paste(Sys.Date(),"Appo_MaxN.Fam.hab.W.csv",sep = "_"), row.names=FALSE)

write.csv(LMaxN.hab.W, file=paste(Sys.Date(),"Appo_LMaxN.hab.W.csv",sep = "_"), row.names=FALSE)
write.csv(LMaxN.Fam.hab.W, file=paste(Sys.Date(),"Appo_LMaxN.Fam.hab.W.csv",sep = "_"), row.names=FALSE)

write.csv(L.hab.L, file=paste(Sys.Date(),"Appo_L.hab.L.csv",sep = "_"), row.names=FALSE)

write.csv(LBio.hab.W, file=paste(Sys.Date(),"Appo_LBio.hab.W.csv",sep = "_"), row.names=FALSE)
write.csv(LBio.Fam.hab.W, file=paste(Sys.Date(),"Appo_LBio.Fam.hab.W.csv",sep = "_"), row.names=FALSE)


#Melt all data into long format for plotting and modeling----
library(reshape)
detach("package:reshape", unload=TRUE) #this fixes names of value problem
library(reshape2)
names(LMaxN.hab.W)



# Need to check names 
# "OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble"                     "Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"

names(MaxN.hab.W)
MaxN.hab.L <- melt(MaxN.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                    variable.name="Taxa",value.name="MaxN")
head(MaxN.hab.L)

MaxN.Fam.hab.L <- melt(MaxN.Fam.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                        variable.name="Family",value.name="MaxN")
head(MaxN.Fam.hab.L)

LMaxN.hab.L <- melt(LMaxN.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                      variable.name="Taxa",value.name="MaxN")
head(LMaxN.hab.L)

LMaxN.Fam.hab.L <- melt(LMaxN.Fam.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                    variable.name="Family",value.name="MaxN")
head(LMaxN.Fam.hab.L)

LBio.hab.L <- melt(LBio.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                        variable.name="Taxa",value.name="Biomass")
head(LBio.hab.L)

LBio.Fam.hab.L <- melt(LBio.Fam.hab.W,id.vars=c("OpCode","FOV.Class","Open.Water","Mean.Relief","SD.Relief","Hard.Corals","Macroalgae","Rocky.Bottom","Sand.Rubble","Soft.Corals","Sponges","Reef","TapeReader" ,"Depth" ,"Comment","Latitude","Longitude","Gear","Status"),       # 
                   variable.name="Family",value.name="Biomass")
head(LBio.Fam.hab.L,)


# Write Long dataframes----
setwd("C:/Tims Documents/ownCloud/MEG_Appo_BRUV_2014/Data")



head(MaxN.hab.L)
head(MaxN.Fam.hab.L)
head(LMaxN.hab.L)
head(LMaxN.Fam.hab.L)
head(LBio.hab.L)
head(LBio.Fam.hab.L)

write.csv(MaxN.hab.L, file=paste(Sys.Date(),"Appo_MaxN.hab.L.csv",sep = "_"), row.names=FALSE)
write.csv(MaxN.Fam.hab.L, file=paste(Sys.Date(),"Appo_MaxN.Fam.hab.L.csv",sep = "_"), row.names=FALSE)

write.csv(LMaxN.hab.L, file=paste(Sys.Date(),"Appo_LMaxN.hab.L.csv",sep = "_"), row.names=FALSE)
write.csv(LMaxN.Fam.hab.L, file=paste(Sys.Date(),"Appo_LMaxN.Fam.hab.L.csv",sep = "_"), row.names=FALSE)

write.csv(LBio.hab.L, file=paste(Sys.Date(),"Appo_LBio.hab.L.csv",sep = "_"), row.names=FALSE)
write.csv(LBio.Fam.hab.L, file=paste(Sys.Date(),"Appo_LBio.Fam.hab.L.csv",sep = "_"), row.names=FALSE)
